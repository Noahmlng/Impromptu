#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from dataclasses import dataclass
from typing import Dict, List, Set
from enum import Enum

class TagCategory(Enum):
    """标签分类"""
    # 找对象相关
    AGE = "age"
    PROFESSION = "profession"  
    PERSONALITY = "personality"
    INTERESTS = "interests"
    LIFESTYLE = "lifestyle"
    VALUES = "values"
    RELATIONSHIP_GOALS = "relationship_goals"
    LOCATION = "location"
    
    # 找队友相关
    SKILLS = "skills"
    INDUSTRY = "industry"
    PROJECT_TYPE = "project_type"
    COLLABORATION_STYLE = "collaboration_style"
    EXPERIENCE_LEVEL = "experience_level"
    AVAILABILITY = "availability"
    GOALS = "goals"
    CHARACTER = "character"

@dataclass
class TagPool:
    """标签池管理"""
    
    # 找对象标签池
    DATING_TAGS = {
        TagCategory.AGE: [
            "18-22岁", "23-27岁", "28-32岁", "33-37岁", "38-42岁", "43-47岁", "48岁以上"
        ],
        
        TagCategory.PROFESSION: [
            "程序员", "设计师", "产品经理", "市场营销", "销售", "教师", "医生", "律师", 
            "金融分析师", "咨询师", "创业者", "自由职业者", "艺术家", "记者", "公务员",
            "工程师", "研究员", "学生"
        ],
        
        TagCategory.PERSONALITY: [
            "外向开朗", "内向安静", "幽默风趣", "温和体贴", "理性冷静", "感性浪漫",
            "独立自主", "依赖性强", "冒险精神", "稳重踏实", "创意思维", "逻辑思维",
            "社交达人", "宅家一族", "完美主义", "随性自由"
        ],
        
        TagCategory.INTERESTS: [
            "运动健身", "音乐", "电影", "读书", "旅行", "摄影", "美食", "游戏",
            "艺术", "舞蹈", "唱歌", "绘画", "写作", "手工", "园艺", "宠物",
            "科技", "投资理财", "时尚", "化妆", "瑜伽", "冥想"
        ],
        
        TagCategory.LIFESTYLE: [
            "早睡早起", "夜猫子", "居家型", "社交型", "节俭", "消费主义",
            "健康饮食", "美食爱好者", "规律作息", "自由散漫", "计划性强", "随性而为",
            "独居", "合租", "与家人同住", "有宠物", "无宠物"
        ],
        
        TagCategory.VALUES: [
            "家庭至上", "事业优先", "自由平等", "传统保守", "物质追求", "精神富足",
            "环保意识", "社会责任", "个人成长", "团队合作", "诚实守信", "包容开放",
            "追求刺激", "安全稳定", "创新进取", "知足常乐"
        ],
        
        TagCategory.RELATIONSHIP_GOALS: [
            "寻找真爱", "结婚生子", "长期关系", "短期交往", "开放关系", "灵魂伴侣",
            "生活伴侣", "精神伴侣", "共同成长", "相互支持", "浪漫恋爱", "理性恋爱"
        ],
        
        TagCategory.LOCATION: [
            "北京", "上海", "广州", "深圳", "杭州", "南京", "成都", "重庆",
            "西安", "武汉", "天津", "青岛", "大连", "厦门", "苏州", "无锡",
            "海外", "小城市", "愿意异地", "不愿意异地"
        ]
    }
    
    # 找队友标签池
    TEAMWORK_TAGS = {
        TagCategory.SKILLS: [
            "产品经理", "设计牛马", "全栈膏药", "全能开发", "数据Hunter", "机器学习",
            "代码苦力", "PPT纺织工", "区块链神棍", "科研狗", "音乐裁缝"
        ],
        
        TagCategory.INDUSTRY: [
            "Startup创始人", "法律刺客", "电商野人", "移动应用", "游戏", "电商", "金融科技", "教育科技", "医疗健康",
            "人工智能", "区块链", "物联网", "新能源", "咨询服务", "HR猎头", "风控法师", "硬件焊武帝", "医学牲口", "教培幽灵",
            "政府编内", "翻译机", "环保圣母", "影视民工", "心理咨询师",
            "房产中介", "农业黑客", "电竞选手", "脱口秀演员", "殡葬策划", "宠物月老",
            "玄学博主", "间谍小说家", "职业伴娘", "试睡师", "恐龙研究员", "南极科考", "自媒体丧尸", "代码狂魔", "金融秃鹫",
            "医疗卷王", "教育内耗", "法律条文怪", "地产泡沫侠", "广告脑洞师", "电商剁手党", "影视画饼人",
            "音乐裁缝", "农业极客", "环保执剑人", "能源矿工", "物流跑男", "餐饮饿鬼", "旅游失踪人口",
            "游戏氪金兽", "媒体标题党", "时尚跟风狗", "建筑水泥魂", "设计像素奴", "公关灭火器",
            "咨询PPT纺织工", "科研论文机器", "人力资源猎巫", "政府材料狗", "翻译复读机",
            "心理咨询树洞", "宠物情感大师", "区块链空气币", "电竞退役选手", "脱口秀梗王",
            "殡葬气氛组", "玄学算命仙", "职业伴娘专业户", "试睡躺平族", "考古摸鱼人",
            "南极WiFi测试员", "保险话术大师", "健身私教推销狂", "网红滤镜精", "直播带货复读机",
            "外卖跑单王", "快递失踪案", "家政细节控", "婚庆套路深",
            "美甲艺术家", "宠物殡葬师", "自由职业幽灵", "斜杠青年穷鬼"
        ],
        
        
        TagCategory.PROJECT_TYPE: [
            "创业项目", "开源项目", "竞赛项目", "实验项目",
            "商业项目", "公益项目", "艺术项目", "研究项目", "APP开发", "网站建设",
            "内容创作", "社区运营", "产品设计", "技术咨询", "培训教育", "从零到一",
            "救火大队", "烂尾楼重建", "老板幻梦", "客户白日梦", "数据黑洞", "需求无底洞", 
            "预算见底", "deadline冲刺", "无限改稿", "战略空谈", "落地成盒", "创新自杀", 
            "复制粘贴", "实验翻车", "用户幻觉", "市场泡沫", "竞品模仿秀", "技术债堆积", 
            "资源乞丐", "跨部门拉扯", "无效会议", "老板即兴发挥", "临时加需求", "推翻重做", 
            "概念验证失败", "合规雷区", "法律擦边球", "政策风险", "资金链断裂", "团队跑路", 
            "投资人画饼", "用户零增长", "数据造假", "公关危机", "服务器崩盘", "竞品狙击", 
            "供应链断裂", "市场冷启动", "产品自嗨", "技术卡脖子", "团队内斗", "远程协作崩", 
            "代码屎山", "设计返工", "测试漏网", "上线回滚", "用户差评", "老板微管理", "彻底摆烂"
        ],
        
        TagCategory.COLLABORATION_STYLE: [
            "远程协作", "面对面合作", "灵活时间", "固定时间", "高频沟通", "低频沟通",
            "详细规划", "敏捷开发", "独立工作", "团队协作", "领导型", "执行型",
            "创意型", "技术型", "商务型", "支持型", "Deadline战士", "会议禅修",
            "已读不回", "彩虹屁精", "脑暴疯子", "Excel巫师", "深夜灵感", "咖啡续命",
            "多开狂魔", "戒手机失败", "养生朋克", "带薪如厕", "反向PUA", "离职预备役",
            "工位盆栽", "键盘侠", "人间扳手", "冷笑话AI", "文件黑洞", "人形GPS", "废话文豪",
            "甩锅冠军", "禅定模式", "社交电量1%", "冷笑话AI"
        ]
        
        TagCategory.EXPERIENCE_LEVEL: [
            "初学者", "有一些经验", "中级水平", "高级专家", "行业资深", "跨界经验",
            "学生", "职场新人", "有创业经验", "有投资经验", "高级管理",
            "实习生苦力", "应届廉价工", "初级背锅侠", "中级PPT纺织", "高级会议代表", 
            "资深摸鱼专家", "经理画饼师", "总监甩锅王", "VP政治玩家", "C-level空气币", 
            "创始人做梦家", "联合创始人跑路预备", "技术菜鸟", "技术老油条", 
            "架构师空中楼阁", "产品经理需求制造机", "运营数据美容师", "市场预算燃烧器", 
            "销售话术复读机", "客服情绪垃圾桶", "设计美颜滤镜", "财务数字魔术师", 
            "HR裁员刽子手", "法务条款陷阱", "行政后勤保姆", "公关灭火队员", "分析师马后炮", 
            "咨询顾问PPT之神", "外包临时工", "自由职业饿鬼", "兼职时间管理", "全职穷忙族", 
            "管理培训生幻灭", "管培生轮岗迷茫", "专家纸上谈兵", "顾问不粘锅", "股东指手画脚", 
            "董事会做梦团", "独立董事花瓶", "监事透明人", "合伙人内斗王", "技术合伙人代码消失", 
            "业务合伙人吹牛", "财务合伙人做账", "空降高管水土不服", "元老级绊脚石", "关系户闲职", 
            "皇亲国戚特权", "老油条推活", "摸鱼宗师"
        ],
        
        TagCategory.AVAILABILITY: [
            "全职投入", "兼职参与", "周末项目", "晚间`时间", "碎片时间", "长期合作",
            "短期项目", "阶段性参与", "高强度", "低强度", "灵活安排", "固定时间",
            "朝九晚五幻想", "996福报", "007幽灵", "弹性工作弹到半夜", "居家办公24小时待机",
            "远程失踪人口", "全天会议马拉松", "午休消失术", "加班表演艺术家", "带薪如厕冠军", 
            "通勤地狱战士", "早起修仙党", "夜猫子灵感迸发", "周末紧急救火", "节假日值班专业户", 
            "调休补班怨灵", "午睡绝缘体", "咖啡续命专家", "下班秒回消息", "休假失联模式", 
            "时差党阴间作息", "项目冲刺不睡觉", "年度无休卷王", "病假不敢请", "年假过期作废", 
            "午休消失术", "通宵改稿狂魔", "凌晨三点发邮件", "周末假装加班", "打卡机克星", 
            "迟到惯犯", "早退高手", "工时造假大师", "工作狂魔", "躺平学研究员", "带薪发呆冠军", 
            "会议睡神", "工位幽灵", "消失的午休", "下班后秒睡", "熬夜爆肝达人", "周末工作应激", 
            "假期焦虑症", "调休 PTSD", "上班梦游", "下班复活", "午休失踪案", "通勤时间比工时长", 
            "工作时长薛定谔", "时间管理崩盘"
        ],
        
        TagCategory.GOALS: [
            "技能提升", "赚取收入", "积累经验", "扩展人脉", "追求兴趣", "解决问题",
            "创造价值", "学习成长", "建立作品集", "找到合伙人", "验证想法", "获得认可",
            "考研战友", "副业搭子", "健身互相", "炒股韭菜", "读书会囚徒", "旅行青蛙",
            "密室坦克", "拼单狂魔", "追星同担", "酒鬼联盟", "薅羊毛党", "脱口秀观众",
            "剧本杀DM", "露营鸽子", "猫奴互助", "手工废柴", "KTV鬼见愁", "相亲难友",
            "玄学互助", "退学威龙"
        ]

        TagCategory.CHARACTER:[
            "INFJ谜语人", "ENFP修狗", "INTJ暴君", "ISTP酷盖", "泪失禁体质", "杠精转世",
            "人间清醒", "佛系咸鱼", "细节恶魔", "选择困难", "八卦雷达", "中二病晚期",
            "傲娇猫系", "自来熟", "高冷冰山", "戏精本精", "钢铁直男/女", "彩虹屁制造机",
            "悲观哲学家", "元气弹", "腹黑兔子", "社杂分子", "复古文青", "赛博朋克", "反卷先锋"
        ]
    }
    
    @classmethod
    def get_all_tags(cls, request_type: str = "all") -> Dict[TagCategory, List[str]]:
        """获取所有标签"""
        if request_type == "找对象":
            return cls.DATING_TAGS
        elif request_type == "找队友":
            return cls.TEAMWORK_TAGS
        else:
            # 合并所有标签
            all_tags = {}
            all_tags.update(cls.DATING_TAGS)
            all_tags.update(cls.TEAMWORK_TAGS)
            return all_tags
    
    @classmethod
    def get_tag_list(cls, request_type: str = "all") -> List[str]:
        """获取标签列表（用于向量化）"""
        tags = cls.get_all_tags(request_type)
        tag_list = []
        for category_tags in tags.values():
            tag_list.extend(category_tags)
        return tag_list
    
    @classmethod
    def get_tag_categories(cls, request_type: str = "all") -> List[TagCategory]:
        """获取标签分类"""
        tags = cls.get_all_tags(request_type)
        return list(tags.keys())
    
    @classmethod
    def find_matching_tags(cls, text: str, request_type: str = "all") -> Set[str]:
        """从文本中找到匹配的标签（简单关键词匹配）"""
        text = text.lower()
        matching_tags = set()
        
        for tag in cls.get_tag_list(request_type):
            if tag.lower() in text:
                matching_tags.add(tag)
        
        return matching_tags

# 单例标签池
tag_pool = TagPool() 